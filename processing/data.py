import json
import pandas as pd
from pandas import json_normalize
import os
import logging
from multiprocessing import Pool
from tqdm import tqdm

# Thi·∫øt l·∫≠p logging ƒë·ªÉ ghi l·ªói
logging.basicConfig(
    filename='../process_errors.log',
    level=logging.ERROR,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Danh s√°ch c·ªôt ƒë∆∞·ª£c ch·ªçn, th√™m teamId
selected_columns = [
    'teamId', 'teamPosition', 'championName', 'win',
    'kills', 'deaths', 'assists', 'kda', 'visionScore'
]


def process_json_file(file_path):
    try:
        # ƒê·ªçc file JSON
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)

        # L·∫•y d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
        participants = data['info']['participants']
        df = json_normalize(participants)

        # Th√™m matchId t·ª´ t√™n file
        match_id = os.path.basename(file_path).replace('.json', '')
        df['matchId'] = match_id

        # L·ªçc c√°c c·ªôt c·∫ßn thi·∫øt
        available_columns = [col for col in selected_columns if col in df.columns]
        result_df = df[available_columns + ['matchId']].copy()  # T·∫°o b·∫£n sao r√µ r√†ng

        # Chuy·ªÉn win th√†nh bool m·ªôt c√°ch an to√†n
        if 'win' in result_df.columns:
            result_df.loc[:, 'win'] = result_df['win'].astype(bool)

        return result_df
    except Exception as e:
        logging.error(f"L·ªói khi x·ª≠ l√Ω {file_path}: {e}")
        return None


def main():
    # Th∆∞ m·ª•c ch·ª©a file JSON
    json_dir = '../matchDetails'
    json_files = [os.path.join(json_dir, f) for f in os.listdir(json_dir) if f.endswith('.json')]

    # Ki·ªÉm tra s·ªë l∆∞·ª£ng file
    print(f"üìÅ T√¨m th·∫•y {len(json_files)} file JSON ƒë·ªÉ x·ª≠ l√Ω.")

    # S·ª≠ d·ª•ng multiprocessing ƒë·ªÉ x·ª≠ l√Ω song song
    with Pool() as pool:
        results = list(tqdm(pool.imap(process_json_file, json_files), total=len(json_files), desc="Processing files"))

    # G·ªôp c√°c DataFrame h·ª£p l·ªá
    dfs = [df for df in results if df is not None]
    if dfs:
        final_df = pd.concat(dfs, ignore_index=True)
        final_df.to_csv('match_stats.csv', index=False, encoding='utf-8')
        print(f"‚úÖ ƒê√£ xu·∫•t {len(final_df)} h√†ng d·ªØ li·ªáu ra match_stats.csv")
        print(f"üìä S·ªë tr·∫≠n ƒë·∫•u duy nh·∫•t: {final_df['matchId'].nunique()}")
    else:
        print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t. Ki·ªÉm tra process_errors.log ƒë·ªÉ bi·∫øt chi ti·∫øt.")


if __name__ == '__main__':
    main()